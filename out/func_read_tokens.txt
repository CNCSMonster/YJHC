(left brace, {)
(keyword for, for)
(left parenthesis, ()
(type, int)
(variable, i)
(operation symbol, =)
(const value, 1)
(semicolon, ;)
(variable, i)
(operation symbol, <)
(const value, 10)
(semicolon, ;)
(variable, i)
(operation symbol, ++)
(right parenthesis, ))
(left brace, {)
(type, int)
(variable, m)
(operation symbol, =)
(variable, i)
(semicolon, ;)
(right brace, })
(function, printf)
(left parenthesis, ()
(const value, "%s")
(comma, ,)
(variable, mm)
(right parenthesis, ))
(semicolon, ;)
(right brace, })
(left brace, {)
(type, void)
(left parenthesis, ()
(operation symbol, *)
(function, pp)
(right parenthesis, ))
(left parenthesis, ()
(type, enum score_level*)
(comma, ,)
(type, struct student*)
(right parenthesis, ))
(semicolon, ;)
(right brace, })
(left brace, {)
(right brace, })
(left brace, {)
(type, void)
(left parenthesis, ()
(operation symbol, *)
(function, p)
(right parenthesis, ))
(left parenthesis, ()
(type, int)
(right parenthesis, ))
(semicolon, ;)
(operation symbol, *)
(variable, a)
(operation symbol, =)
(operation symbol, *)
(variable, a)
(operation symbol, +)
(operation symbol, *)
(variable, b)
(semicolon, ;)
(operation symbol, *)
(variable, b)
(operation symbol, =)
(operation symbol, *)
(variable, a)
(operation symbol, -)
(operation symbol, *)
(variable, b)
(semicolon, ;)
(operation symbol, *)
(variable, a)
(operation symbol, =)
(operation symbol, *)
(variable, a)
(operation symbol, -)
(operation symbol, *)
(variable, b)
(semicolon, ;)
(right brace, })
(left brace, {)
(keyword return, return)
(variable, score)
(semicolon, ;)
(right brace, })
(left brace, {)
(function, printf)
(left parenthesis, ()
(const value, "my name is:%s,my socre is:%f,my age is:%d")
(comma, ,)
(variable, name)
(comma, ,)
(function, getScore)
(left parenthesis, ()
(right parenthesis, ))
(comma, ,)
(variable, age)
(right parenthesis, ))
(semicolon, ;)
(right brace, })
(left brace, {)
(keyword return, return)
(semicolon, ;)
(right brace, })
(left brace, {)
(keyword if, if)
(left parenthesis, ()
(variable, score)
(operation symbol, >=)
(const value, 33)
(right parenthesis, ))
(left brace, {)
(keyword return, return)
(variable, GOOD)
(semicolon, ;)
(right brace, })
(keyword else if, else if)
(left parenthesis, ()
(variable, score)
(operation symbol, ==)
(const value, 22)
(right parenthesis, ))
(left brace, {)
(variable, score)
(operation symbol, ++)
(semicolon, ;)
(keyword return, return)
(variable, NORMAL)
(semicolon, ;)
(right brace, })
(keyword else, else)
(left brace, {)
(keyword return, return)
(variable, BAD)
(semicolon, ;)
(right brace, })
(right brace, })
(left brace, {)
(keyword do in do-while structure, do)
(left brace, {)
(type, int)
(variable, a)
(operation symbol, =)
(const value, 1)
(semicolon, ;)
(right brace, })
(keyword while, while)
(left parenthesis, ()
(const value, 0)
(right parenthesis, ))
(semicolon, ;)
(keyword for, for)
(left parenthesis, ()
(type, int)
(variable, i)
(operation symbol, =)
(const value, 0)
(semicolon, ;)
(variable, i)
(operation symbol, <)
(variable, a)
(semicolon, ;)
(variable, i)
(operation symbol, ++)
(right parenthesis, ))
(left brace, {)
(keyword while, while)
(left parenthesis, ()
(variable, i)
(operation symbol, <)
(const value, 2)
(operation symbol, *)
(variable, a)
(right parenthesis, ))
(left brace, {)
(keyword do in do-while structure, do)
(left brace, {)
(type, int)
(variable, j)
(operation symbol, =)
(variable, i)
(semicolon, ;)
(right brace, })
(keyword while, while)
(left parenthesis, ()
(variable, j)
(operation symbol, <)
(const value, 2)
(right parenthesis, ))
(semicolon, ;)
(right brace, })
(right brace, })
(type, int)
(variable, a)
(operation symbol, =)
(const value, 1)
(semicolon, ;)
(keyword if, if)
(left parenthesis, ()
(variable, a)
(operation symbol, >)
(const value, 1)
(right parenthesis, ))
(left brace, {)
(keyword for, for)
(left parenthesis, ()
(type, int)
(variable, i)
(operation symbol, =)
(const value, 0)
(semicolon, ;)
(variable, i)
(operation symbol, <)
(variable, a)
(semicolon, ;)
(variable, i)
(operation symbol, ++)
(right parenthesis, ))
(left brace, {)
(keyword while, while)
(left parenthesis, ()
(variable, i)
(operation symbol, <)
(const value, 2)
(operation symbol, *)
(variable, a)
(right parenthesis, ))
(left brace, {)
(keyword do in do-while structure, do)
(left brace, {)
(type, int)
(variable, j)
(operation symbol, =)
(variable, i)
(semicolon, ;)
(right brace, })
(keyword while, while)
(left parenthesis, ()
(variable, j)
(operation symbol, <)
(const value, 2)
(right parenthesis, ))
(semicolon, ;)
(right brace, })
(right brace, })
(right brace, })
(type, struct student)
(variable, stu1)
(semicolon, ;)
(type, union multiData)
(variable, md)
(semicolon, ;)
(keyword const, const)
(variable, m)
(operation symbol, =)
(const value, 5)
(semicolon, ;)
(keyword typedef, typedef)
(semicolon, ;)
(type, MyInt)
(variable, th)
(semicolon, ;)
(keyword typedef, typedef)
(semicolon, ;)
(type, enum score_level)
(variable, L)
(semicolon, ;)
(function, printf)
(left parenthesis, ()
(const value, "N=M=%d")
(comma, ,)
(const value, 3)
(right parenthesis, ))
(semicolon, ;)
(variable, stu1)
(operation symbol, .)
(left parenthesis, ()
(right parenthesis, ))
(semicolon, ;)
(type, LEVEL)
(variable, level)
(operation symbol, =)
(function, judLevel)
(left parenthesis, ()
(variable, stu1)
(right parenthesis, ))
(semicolon, ;)
(type, int)
(variable, a)
(operation symbol, =)
(const value, 3)
(semicolon, ;)
(function, printf)
(left parenthesis, ()
(const value, "student%s's score level is %d,he get %d pens!")
(comma, ,)
(const value, 3)
(comma, ,)
(variable, a)
(right parenthesis, ))
(semicolon, ;)
(keyword return, return)
(const value, 1)
(semicolon, ;)
(right brace, })
