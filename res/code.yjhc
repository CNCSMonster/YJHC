//重新使用yjhc语法编写一个程序
//首先是预编译包含语句
#include <stdio.h>
#include <stdlib.h>

//然后是宏替换语句
//可以看到N中嵌套了M,但是没关系,我们的预编译处理程序能够应对
#define N a=M;
#define M 3
#define T printf("N=M=%d",M);   //宏替换不应该替换字符串里面的内容

//然后是全局常量与变量定义
const double pi = 3.1415926;
int year;
int month;

void funcA(const char* mm){
    printf("%s",mm);
}

//然后是各种自定义类型定义
typedef enum score_level{    //可以处理typedef语句
    GOOD,
    BAD,
    NORMAL
}LEVEL,*LEVELP;
struct student{
    double score;
    int age;
    int* agep;
    int * agep;
    char name[20][22];
    double getScore(); //学生的分数内容,其表中只能够说明类型
    void selfIntroduce();   //学生自我介绍
    
};
typedef int GG;


void swap(int* a,int * b){
    void (*p)(int); //定义一个函数指针,看代码如何处理
    *a=*a+*b;
    *b=*a-*b;
    *a=*a-*b;
}

union multiData{
    int integer;
    double decimal;
    short shortInt;
    void doA();
};



/*
然后是函数定义
函数,类型定义,预编译包含,和声明语句,全局常量变量定义,和宏替换语句,在yjhc语法中可以以任意顺序放置
*/
//新语法中函数可以定义函数头,也可以不定义函数头

//可以定义函数头,但是在中间过程中函数头会被处理掉
//struct student->double getScore();
//LEVEL judLevel(int score);

//结构体方法定义方式
struct student->double getScore(){
    return score;   //在结构体方法中能够直接引用结构体的成员变量
}
//结构体方法二
struct student->void selfIntroduce(){
    //结构体方法内调用了结构体自身的方法getScore()
    printf("my name is:%s,my socre is:%f,my age is:%d",name,getScore(),age);
}

union multiData->void doA(){
    return ;
}

//全局方法
LEVEL judLevel(int score){
    if(score>=33)
        return GOOD;
    else if(score==22){
        score++;
        return NORMAL;
    }else
        return BAD;
    
}

//全局方法而且是函数入口
int main(){
    do int a=1; while(0);
    struct student stu1;
    union multiData md;
    const int m=5;
    enum score_level L;
    T
    stu1.selfIntroduce();
    LEVEL level=judLevel(stu1);
    int N
    printf("student%s's score level is %d,he get %d pens!",M,a);
    return 1;
}
